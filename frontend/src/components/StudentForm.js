import React from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import {
  FormContainer,
  FormTitle,
  FormGroup,
  Label,
  Input,
  ErrorMessage,
  ButtonContainer,
  Button
} from './StudentForm.styles';

// Zod Schema for validation
// Updated to match backend (camelCase, studentId as number)
const studentSchema = z.object({
  studentId: z.number().optional(), // studentId is a number and optional
  lastName: z.string().min(1, "Sobrenome é obrigatório"),
  firstName: z.string().min(1, "Nome é obrigatório"),
  age: z.coerce.number().min(1, "Idade é obrigatória").positive("Idade deve ser positiva"),
  course: z.string().min(1, "Curso é obrigatório"),
  year: z.string().min(1, "Ano é obrigatório"), // e.g., "3º"
});

// Helper to map frontend state (selectedStudent) to form data if names differ
// For now, we assume selectedStudent will also use camelCase from App.js
const mapToFormDefaults = (student) => {
  if (!student) return { studentId: undefined, lastName: '', firstName: '', age: '', course: '', year: '' };
  return {
    studentId: student.studentId, // Ensure this is number or undefined
    lastName: student.lastName,
    firstName: student.firstName,
    age: student.age,
    course: student.course,
    year: student.year,
  };
};


function StudentForm({ setStudents, students, selectedStudent, setSelectedStudent }) {
  const { register, handleSubmit, reset, formState: { errors } } = useForm({
    resolver: zodResolver(studentSchema),
    defaultValues: mapToFormDefaults(selectedStudent)
  });

  React.useEffect(() => {
    reset(mapToFormDefaults(selectedStudent));
  }, [selectedStudent, reset]);

  const onSubmit = async (formData) => { // formData will have camelCase names
    try {
      if (selectedStudent && selectedStudent.studentId) { // Check for studentId for update
        // Update existing student
        const response = await fetch(`http://localhost:5000/api/Students/${selectedStudent.studentId}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(formData), // formData is already in camelCase
        });
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        const updatedStudent = await response.json(); // Expects camelCase
        setStudents(students.map(s => s.studentId === selectedStudent.studentId ? updatedStudent : s));
        setSelectedStudent(null); // Clear selection
      } else {
        // Add new student
        // studentId should not be in formData or should be undefined
        const { studentId, ...dataToSend } = formData; // Exclude studentId for POST
        const response = await fetch('http://localhost:5000/api/Students', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(dataToSend), 
        });
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        const newStudent = await response.json(); // Expects camelCase
        setStudents([...students, newStudent]);
      }
      reset(mapToFormDefaults(null));
    } catch (error) {
      console.error("Failed to submit student data:", error);
    }
  };
  
  const handleClear = () => {
    reset(mapToFormDefaults(null));
    setSelectedStudent(null); 
  };

  const handleDelete = async () => {
    if (selectedStudent && selectedStudent.studentId) {
      try {
        const response = await fetch(`http://localhost:5000/api/Students/${selectedStudent.studentId}`, {
          method: 'DELETE',
        });
        if (response.status !== 204 && !response.ok) { // Check for 204 or other ok statuses
           throw new Error(`HTTP error! status: ${response.status}`);
        }
        setStudents(students.filter(s => s.studentId !== selectedStudent.studentId));
        setSelectedStudent(null);
        reset(mapToFormDefaults(null));
      } catch (error) {
        console.error("Failed to delete student:", error);
        // Optionally, set an error state here to display to the user
      }
    }
  };


  return (
    <FormContainer>
      <FormTitle>Cadastro de Aluno</FormTitle>
      <form onSubmit={handleSubmit(onSubmit)}>
        <FormGroup>
          <Label htmlFor="studentId">ID do Aluno:</Label>
          <Input
            type="text" // Keep as text for display, Zod coerces to number
            id="studentId"
            {...register("studentId")}
            placeholder="ID (gerado automaticamente)"
            disabled // ID is always disabled, generated by backend or shown for selected
          />
          {/* No error message for studentId as it's not user-editable */}
        </FormGroup>
        <FormGroup>
          <Label htmlFor="lastName">Sobrenome:</Label>
          <Input
            type="text"
            id="lastName"
            {...register("lastName")}
            placeholder="Sobrenome"
          />
          {errors.lastName && <ErrorMessage>{errors.lastName.message}</ErrorMessage>}
        </FormGroup>
        <FormGroup>
          <Label htmlFor="firstName">Nome:</Label>
          <Input
            type="text"
            id="firstName"
            {...register("firstName")}
            placeholder="Nome"
          />
          {errors.firstName && <ErrorMessage>{errors.firstName.message}</ErrorMessage>}
        </FormGroup>
        <FormGroup>
          <Label htmlFor="age">Idade:</Label>
          <Input
            type="number"
            id="age"
            {...register("age")}
            placeholder="Idade"
          />
          {errors.age && <ErrorMessage>{errors.age.message}</ErrorMessage>}
        </FormGroup>
        <FormGroup>
          <Label htmlFor="course">Curso:</Label>
          <Input
            type="text"
            id="course"
            {...register("course")}
            placeholder="Curso"
          />
          {errors.course && <ErrorMessage>{errors.course.message}</ErrorMessage>}
        </FormGroup>
        <FormGroup>
          <Label htmlFor="year">Ano:</Label>
          <Input
            type="text"
            id="year"
            {...register("year")}
            placeholder="Ano"
          />
          {errors.year && <ErrorMessage>{errors.year.message}</ErrorMessage>}
        </FormGroup>
        <ButtonContainer>
          <Button type="submit" className={selectedStudent ? "btn-save" : "btn-add"}>
            {selectedStudent ? "SALVAR" : "ADICIONAR"}
          </Button>
          {selectedStudent && (
             <Button type="button" onClick={handleDelete} className="btn-delete">EXCLUIR</Button>
          )}
          <Button type="button" onClick={handleClear} className="btn-clear">LIMPAR</Button>
        </ButtonContainer>
      </form>
    </FormContainer>
  );
}

export default StudentForm;
